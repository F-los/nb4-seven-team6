// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id                 Int      @id @default(autoincrement())
  name               String
  description        String?
  photoUrl           String?
  goalRep            Int      @default(0)
  discordWebhookUrl  String?
  discordInviteUrl   String?
  likeCount          Int      @default(0)
  ownerParticipantId Int // 오너는 Participant 중 한 명
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  owner        Participant   @relation("GroupOwner", fields: [ownerParticipantId], references: [id], onDelete: Restrict)
  participants Participant[]
  tags         Tag[]
  badges       Badge[]
records     Records[]  // 그룹 전체 운동 기록 Badge수여할때 필요한 정보
}

model Participant {
  id        Int      @id @default(autoincrement())
  groupId   Int
  nickname  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  ownedGroup Group[] @relation("GroupOwner")

  @@unique([groupId, nickname]) // 그룹 내 닉네임 중복 방지
  @@index([groupId])
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  groups Group[]
}

model Badge {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  groups Group[]
}
